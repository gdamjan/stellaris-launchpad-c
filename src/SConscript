"""
Builds a simple example application which runs bare-metal on a TI Stellaris Launchpad.

If you have the arm-none-eabi toolchain installed, this will build the example:
    $ scons 

This will build and flash the example on to your Launchpad:
    $ scons flash

Copyright (c) 2012-2013 theJPster (github@thejpster.org.uk)

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
"""

env = Environment()

# See ../prerequisites.sh
FLASH_TOOL = "sudo ./lm4tools/lm4flash/lm4flash"

# If you have installed the toolchain from https://launchpad.net/gcc-arm-embedded,
# edit this to point to your gcc. This compiler comes with a bare-metal C library
# called newlib
ARM_TOOL_PREFIX = "./gcc-arm/bin/arm-none-eabi"

env.Replace(CC="%s-gcc" % ARM_TOOL_PREFIX)
env.Replace(AS="%s-as" % ARM_TOOL_PREFIX)
env.Replace(LD="%s-gcc" % ARM_TOOL_PREFIX)

verbose = ARGUMENTS.get("VERBOSE", 0)
if not verbose:
    env.Replace(CCCOMSTR="[CC] $SOURCE -> $TARGET")
    env.Replace(LINKCOMSTR="[LD] $TARGET")

# Builder which uses objcopy to turn the .elf into something we can flash
strip = Builder(
    action="%s-objcopy -O binary ${SOURCE} ${TARGET}" % ARM_TOOL_PREFIX)
env.Append(BUILDERS={"Strip": strip})

# Builder which uses objdump to turn the .elf into assembly code
objdump = Builder(
    action="%s-objdump -S -d ${SOURCE} > ${TARGET}" % ARM_TOOL_PREFIX)
env.Append(BUILDERS={"Objdump": objdump})

# Builder to flash on to Launchpad board
flash = Builder(action="%s ${SOURCE}" % FLASH_TOOL)
env.Append(BUILDERS={"Flash": flash})

# Builder which uses size to show segment sizes
size = Builder(action="echo Max 0x40000 flash, 0x8000 SRAM && %s-size -B -x ${SOURCE}" % ARM_TOOL_PREFIX)
env.Append(BUILDERS={"Size": size})

# Set some sensible defaults for the Launchpad"s processor
env.Append(CCFLAGS=[
    "-mthumb",
    "-mcpu=cortex-m4",
    # For some reason, FP code causes the chip to crash
    #"-mfloat-abi=softfp",
    #"-mfpu=fpv4-sp-d16",
    "-mfloat-abi=soft",
    # O2 or higher causes a crash
    "-O1",
    "-g",
    "-Wall",
    "-pedantic",
    "-std=c99",
    "-fno-stack-protector",
    "-Isrc"
])
# Use our custom linker script
env.Append(LINKFLAGS=[
    "-Wl,-T,basic.ld",
    "-mthumb",
    "-mcpu=cortex-m4",
    # For some reason, FP code causes the chip to crash
    #"-mfloat-abi=softfp",
    #"-mfpu=fpv4-sp-d16",
    "-mfloat-abi=soft",
    "-Wl,-Map,bin/start.map"
])

env.Append(LIBS = [
    # libm -> the maths library
    "m",
])

sources = [
    "main.c",
    "misc/src/startup.c",
    "misc/src/misc.c",
    "misc/src/libc.c",
    "timers/src/timers.c",
    "gpio/src/gpio.c",
    "uart/src/uart.c",
    "lcd/src/lcd.c",
    "command/src/command.c",
    "circbuffer/src/circbuffer.c",
    "font/src/font.c",
    "font/src/SevenSeg_XXXL_Num.c",
    "font/src/BigFont.c",
]

# Set the clock rate to 66.67MHz
# env.Append(CCFLAGS=["-DCLOCK_RATE=16000000"])
env.Append(CCFLAGS=["-DCLOCK_RATE=66666666"])

# We want the LCD tall, not wide.
env.Append(CCFLAGS=["-DLCD_ROTATE_DISPLAY"])

# Compiles the ELF version of our program
elf = env.Program(target="start.elf", source=sources, CPPPATH='.')
# SCons doesn"t notice the linker script is a dependency, so tell it
Depends(elf, "../basic.ld")

# Creates the raw binary version from the ELF
bin = env.Strip(target="start.bin", source=elf)
# Before we create the binary, show how big the ELF is
Depends(bin, env.Size(source=elf))

# Flashes the raw binary onto the board
fd = env.Flash(target="flash", source=bin)

# Allow the user to call "scons flash" to build and flash
fda = env.Alias("flash", fd)
env.AlwaysBuild(fda)

# Allow the user to call "scons asm" to build and dump the assembler
asm = env.Objdump(target="start.s", source=elf)
env.Alias("asm", asm)

# By default, just compile and don't flash
Default(bin)
