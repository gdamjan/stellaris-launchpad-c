"""
Builds a simple example application which runs bare-metal on a TI Stellaris Launchpad.

This will build the example:
    $ scons

This will build and flash the example on to your Launchpad:
    $ scons flash

Copyright (c) 2012 theJPster (github@thejpster.org.uk)
"""

env = Environment()

# See ../prerequisites.sh
FLASH_TOOL = "sudo ./lm4tools/lm4flash/lm4flash"

# If you have the Ubuntu cross compiler installed, you want this
#ARM_TOOL_PREFIX = "arm-linux-gnueabi"
# If you have installed the toolchain from https://launchpad.net/gcc-arm-embedded, you want this one
ARM_TOOL_PREFIX = "./gcc-arm-none-eabi-4_6-2012q4/bin/arm-none-eabi"

env.Replace(CC="%s-gcc" % ARM_TOOL_PREFIX)
env.Replace(AS="%s-as" % ARM_TOOL_PREFIX)
env.Replace(LD="%s-ld" % ARM_TOOL_PREFIX)

# Builder which uses objcopy to turn the .elf into something we can flash
strip = Builder(action='%s-objcopy -O binary ${SOURCE} ${TARGET}' % ARM_TOOL_PREFIX)
env.Append(BUILDERS={'Strip': strip})

# Builder to flash on to Launchpad board
flash = Builder(action='%s ${SOURCE}' % FLASH_TOOL)
env.Append(BUILDERS={'Flash': flash})

# Set some sensible defaults for the Launchpad's processor
env.Append(CCFLAGS=['-mcpu=cortex-m4', '-mthumb', '-O0', '-g', '-Wall', '-pedantic', '-std=c99'])
# Link without standard library because we're writing bare-metal code.
env.Append(LINKFLAGS=["-T", "basic.ld", "-Xlinker", "--build-id=none", "-nostdlib"])

sources = [
    'startup.c',  # Must come first
    'main.c',
]

# Compiles the ELF version of our program
elf = env.Program(target='start.elf', source=sources)
# SCons doesn't notice the linker script is a dependency, so tell it
Depends(elf, '../basic.ld')

# Creates the raw binary version from the ELF
bin = env.Strip(target='start.bin', source=elf)

# Flashes the raw binary onto the board
fd = env.Flash(target='flash', source=bin)

# All the user to call 'scons flash' to build and flash
fda = env.Alias('flash', fd)
env.AlwaysBuild(fda)

# By default, just compile and don't flash
Default(bin)
