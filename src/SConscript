"""
Builds a simple example application which runs bare-metal on a TI Stellaris Launchpad.

If you have the arm-none-eabi toolchain installed, this will build the example:
    $ scons 

This will build and flash the example on to your Launchpad:
    $ scons flash

Copyright (c) 2012 theJPster (github@thejpster.org.uk)
"""

env = Environment()

# See ../prerequisites.sh
FLASH_TOOL = "sudo ./lm4tools/lm4flash/lm4flash"

# If you have installed the toolchain from https://launchpad.net/gcc-arm-embedded,
# edit this to point to your gcc. This compiler comes with a bare-metal C library
# called newlib
ARM_TOOL_PREFIX = "./gcc-arm-none-eabi-4_6-2012q4/bin/arm-none-eabi"

env.Replace(CC="%s-gcc" % ARM_TOOL_PREFIX)
env.Replace(AS="%s-as" % ARM_TOOL_PREFIX)
env.Replace(LD="%s-gcc" % ARM_TOOL_PREFIX)

env.Replace(CCCOMSTR = "[CC] $SOURCE -> $TARGET")
env.Replace(LINKCOMSTR = "[LD] $SOURCE -> $TARGET")

# Builder which uses objcopy to turn the .elf into something we can flash
strip = Builder(action='%s-objcopy -O binary ${SOURCE} ${TARGET}' % ARM_TOOL_PREFIX)
env.Append(BUILDERS={'Strip': strip})

# Builder which uses objdump to turn the .elf into assembly code
objdump = Builder(action='%s-objdump -S -d ${SOURCE} > ${TARGET}' % ARM_TOOL_PREFIX)
env.Append(BUILDERS={'Objdump': objdump})

# Builder to flash on to Launchpad board
flash = Builder(action='%s ${SOURCE}' % FLASH_TOOL)
env.Append(BUILDERS={'Flash': flash})

# Set some sensible defaults for the Launchpad's processor
env.Append(CCFLAGS=[
    '-mthumb',
    '-mcpu=cortex-m4',
    '-mfloat-abi=softfp',
    '-mfpu=fpv4-sp-d16',
    '-O0',
    '-g',
    '-Wall',
    '-pedantic',
    '-std=c99',
    '-fno-stack-protector',
    '-Isrc'
    ])
# Use our custom linker script
env.Append(LINKFLAGS=[
    "-Wl,-T,basic.ld",
    "-mthumb",
    '-mcpu=cortex-m4',
    '-mfloat-abi=softfp',
    '-mfpu=fpv4-sp-d16',
    "-Wl,-Map,bin/start.map"
    ])

sources = [
    'main.c',
    'misc/src/startup.c',
    'misc/src/misc.c',
    'misc/src/libc.c',
    'gpio/src/gpio.c',
    'uart/src/uart.c',
    '1wire/src/1wire.c',
]

# Compiles the ELF version of our program
elf = env.Program(target='start.elf', source=sources)
# SCons doesn't notice the linker script is a dependency, so tell it
Depends(elf, '../basic.ld')

# Creates the raw binary version from the ELF
bin = env.Strip(target='start.bin', source=elf)

# Flashes the raw binary onto the board
fd = env.Flash(target='flash', source=bin)

# Allow the user to call 'scons flash' to build and flash
fda = env.Alias('flash', fd)
env.AlwaysBuild(fda)

# Allow the user to call 'scons asm' to build and dump the assembler
asm = env.Objdump(target='start.s', source=elf)
env.Alias('asm', asm)

# By default, just compile and don't flash
Default(bin)
